{"ast":null,"code":"var _jsxFileName = \"/home/bloodryne/whatsapp-clone-using-firebase/whatsapp/src/Chat.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar, IconButton } from '@material-ui/core';\nimport { AttachFile, InsertEmoticon, MoreVert, SearchOutlined } from '@material-ui/icons';\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport \"./Chat.css\";\nimport db from './firebase';\nimport { useStateValue } from './StateProvider';\nimport firebase from \"firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chat() {\n  _s();\n\n  var _messages, _messages$timestamp;\n\n  const [input, setInput] = useState(\"\");\n  const [seed, setSeed] = useState('');\n  const {\n    roomId\n  } = useParams();\n  const [roomName, setRoomName] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [{\n    user\n  }, dispatch] = useStateValue();\n  useEffect(() => {\n    if (roomId) {\n      db.collection('rooms').doc(roomId).onSnapshot(snapshot => setRoomName(snapshot.data().name));\n      db.collection('rooms').doc(roomId).collection(\"messages\").orderBy(\"timestamp\", \"asc\").onSnapshot(snapshot => {\n        setMessages(snapshot.docs.map(doc => doc.data()));\n      });\n    }\n  }, [roomId]);\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, [roomId]);\n\n  const sendMessage = e => {\n    e.preventDefault();\n    db.collection('rooms').doc(roomId).collection('messages').add({\n      message: input,\n      name: user.displayName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setInput(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_header\",\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        src: `https://avatars.dicebear.com/api/human/${seed}.svg`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_headerInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: roomName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Last seen \", \" \", new Date((_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : (_messages$timestamp = _messages.timestamp) === null || _messages$timestamp === void 0 ? void 0 : _messages$timestamp.toDate()).toUTCString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_headerRight\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          children: /*#__PURE__*/_jsxDEV(SearchOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          children: /*#__PURE__*/_jsxDEV(AttachFile, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          children: /*#__PURE__*/_jsxDEV(MoreVert, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_body\",\n      children: messages.map(message => {\n        var _message$timestamp;\n\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `chat_message ${message.name === user.displayName && 'chat_reciever'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat_name\",\n            children: message.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 22\n          }, this), message.message, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat_timestamp\",\n            children: new Date((_message$timestamp = message.timestamp) === null || _message$timestamp === void 0 ? void 0 : _message$timestamp.toDate()).toUTCString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 22\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat_footer\",\n      children: [/*#__PURE__*/_jsxDEV(InsertEmoticonIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type a message\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          type: \"submit\",\n          children: \"Send a message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"ZoAkX4uTjGM9KzoVZRdZgRKlg/k=\", false, function () {\n  return [useParams, useStateValue];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/bloodryne/whatsapp-clone-using-firebase/whatsapp/src/Chat.js"],"names":["Avatar","IconButton","AttachFile","InsertEmoticon","MoreVert","SearchOutlined","InsertEmoticonIcon","MicIcon","React","useEffect","useState","useParams","db","useStateValue","firebase","Chat","input","setInput","seed","setSeed","roomId","roomName","setRoomName","messages","setMessages","user","dispatch","collection","doc","onSnapshot","snapshot","data","name","orderBy","docs","map","Math","floor","random","sendMessage","e","preventDefault","add","message","displayName","timestamp","firestore","FieldValue","serverTimestamp","Date","length","toDate","toUTCString","target","value"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,mBAAnC;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,QAArC,EAA+CC,cAA/C,QAAqE,oBAArE;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAO,YAAP;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,QAAP,MAAqB,UAArB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AAAA;;AACZ,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAACU,IAAAA;AAAD,MAAWT,SAAS,EAA1B;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAK,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAK,CAAC;AAACe,IAAAA;AAAD,GAAD,EAASC,QAAT,IAAqBb,aAAa,EAAvC;AAEJJ,EAAAA,SAAS,CAAC,MAAM;AAChB,QAAGW,MAAH,EAAU;AACNR,MAAAA,EAAE,CAACe,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BR,MAA3B,EAAmCS,UAAnC,CAA+CC,QAAD,IAC1CR,WAAW,CAACQ,QAAQ,CAACC,IAAT,GAAgBC,IAAjB,CADf;AAIApB,MAAAA,EAAE,CAACe,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BR,MAA3B,EAAmCO,UAAnC,CAA8C,UAA9C,EAA0DM,OAA1D,CAAkE,WAAlE,EAA8E,KAA9E,EAAqFJ,UAArF,CAAgGC,QAAQ,IAAI;AACxGN,QAAAA,WAAW,CAACM,QAAQ,CAACI,IAAT,CAAcC,GAAd,CAAkBP,GAAG,IAAIA,GAAG,CAACG,IAAJ,EAAzB,CAAD,CAAX;AAAkD,OADtD;AAEH;AAEA,GAVQ,EAUP,CAACX,MAAD,CAVO,CAAT;AAaIX,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,OAAO,CAACiB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,IAA3B,CAAD,CAAP;AACH,GAFQ,EAEN,CAAClB,MAAD,CAFM,CAAT;;AAIA,QAAMmB,WAAW,GAAIC,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACC,cAAF;AACA7B,IAAAA,EAAE,CAACe,UAAH,CAAc,OAAd,EAAuBC,GAAvB,CAA2BR,MAA3B,EAAmCO,UAAnC,CAA8C,UAA9C,EAA0De,GAA1D,CAA8D;AAC1DC,MAAAA,OAAO,EAAE3B,KADiD;AAE1DgB,MAAAA,IAAI,EAAEP,IAAI,CAACmB,WAF+C;AAG1DC,MAAAA,SAAS,EAAE/B,QAAQ,CAACgC,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B;AAH+C,KAA9D;AAMA/B,IAAAA,QAAQ,CAAC,EAAD,CAAR;AAEH,GAVD;;AAaA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,GAAG,EAAG,0CAAyCC,IAAK;AAA5D;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI;AAAA,oBAAKG;AAAL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,mCAAc,GAAd,EACK,IAAI4B,IAAJ,cACG1B,QAAQ,CAACA,QAAQ,CAAC2B,MAAT,GAAkB,CAAnB,CADX,qEACG,UACAL,SAFH,wDACG,oBACWM,MADX,EADH,EAGCC,WAHD,EADL;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAWI;AAAM,QAAA,SAAS,EAAC,kBAAhB;AAAA,gCACI,QAAC,UAAD;AAAA,iCACI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,UAAD;AAAA,iCACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAOI,QAAC,UAAD;AAAA,iCACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAyBI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACK7B,QAAQ,CAACY,GAAT,CAAcQ,OAAD;AAAA;;AAAA,4BACT;AAAG,UAAA,SAAS,EAAG,gBAAeA,OAAO,CAACX,IAAR,KAAiBP,IAAI,CAACmB,WAAtB,IAAqC,eAAgB,EAAnF;AAAA,kCAEA;AAAM,YAAA,SAAS,EAAC,WAAhB;AAAA,sBAA8BD,OAAO,CAACX;AAAtC;AAAA;AAAA;AAAA;AAAA,kBAFA,EAGCW,OAAO,CAACA,OAHT,eAKA;AAAM,YAAA,SAAS,EAAC,gBAAhB;AAAA,sBACK,IAAIM,IAAJ,uBAASN,OAAO,CAACE,SAAjB,uDAAS,mBAAmBM,MAAnB,EAAT,EAAsCC,WAAtC;AADL;AAAA;AAAA;AAAA;AAAA,kBALA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADS;AAAA,OAAb;AADL;AAAA;AAAA;AAAA;AAAA,YAzBJ,eAwCI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,gCACA;AAAO,UAAA,KAAK,EAAEpC,KAAd;AAAqB,UAAA,QAAQ,EAAGwB,CAAD,IAAOvB,QAAQ,CAACuB,CAAC,CAACa,MAAF,CAASC,KAAV,CAA9C;AAAgE,UAAA,WAAW,EAAC,gBAA5E;AAA6F,UAAA,IAAI,EAAC;AAAlG;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAQ,UAAA,OAAO,EAAEf,WAAjB;AAA8B,UAAA,IAAI,EAAC,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAMI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAxCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmDH;;GAzFQxB,I;UAGYJ,S,EAGSE,a;;;KANrBE,I;AA2FT,eAAeA,IAAf","sourcesContent":["import { Avatar, IconButton } from '@material-ui/core';\nimport { AttachFile, InsertEmoticon, MoreVert, SearchOutlined } from '@material-ui/icons';\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport \"./Chat.css\";\nimport db from './firebase';\nimport { useStateValue } from './StateProvider';\nimport firebase from \"firebase\";\n\nfunction Chat() {\n    const [input, setInput] = useState(\"\");\n    const [seed, setSeed] = useState('');\n    const {roomId} = useParams();\n    const [roomName, setRoomName] = useState(\"\");\n    const[messages, setMessages] = useState([]);\n    const[{user}, dispatch] = useStateValue();\n\nuseEffect(() => {\nif(roomId){\n    db.collection('rooms').doc(roomId).onSnapshot((snapshot) => \n        setRoomName(snapshot.data().name\n    ))\n\n    db.collection('rooms').doc(roomId).collection(\"messages\").orderBy(\"timestamp\",\"asc\").onSnapshot(snapshot => {\n        setMessages(snapshot.docs.map(doc => doc.data()))});\n}\n\n},[roomId])\n\n\n    useEffect(() => {\n        setSeed(Math.floor(Math.random() * 5000))\n    }, [roomId])\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n        db.collection('rooms').doc(roomId).collection('messages').add({\n            message: input,\n            name: user.displayName,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        });\n\n        setInput(\"\");\n\n    }\n\n\n    return (\n        <div className='chat'>\n            < div className=\"chat_header\">\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\n                <div className=\"chat_headerInfo\">\n                    <h3>{roomName}</h3>\n                    <p>Last seen {\" \"}\n                        {new Date(\n                            messages[messages.length - 1]?.\n                            timestamp?.toDate()\n                        ).toUTCString()}</p>\n                </div>\n\n                < div className=\"chat_headerRight\">\n                    <IconButton>\n                        <SearchOutlined />\n                    </IconButton>\n                    <IconButton>\n                        <AttachFile />\n                    </IconButton>\n                    <IconButton>\n                        <MoreVert />\n                    </IconButton>\n                </div>\n            </div>\n\n            <div className=\"chat_body\">\n                {messages.map((message)=>(\n                     <p className={`chat_message ${message.name === user.displayName && 'chat_reciever'}`}>\n                    \n                     <span className=\"chat_name\" >{message.name}</span> \n                     {message.message}\n   \n                     <span className=\"chat_timestamp\">\n                         {new Date(message.timestamp?.toDate()).toUTCString()}\n                     </span>\n                       </p>\n\n                ))}\n               \n            </div>\n            <div className=\"chat_footer\">\n                <InsertEmoticonIcon />\n                <form>\n                <input value={input} onChange={(e) => setInput(e.target.value)} placeholder=\"Type a message\" type=\"text\" />\n                <button onClick={sendMessage} type=\"submit\">Send a message</button>\n                </form>\n                <MicIcon />\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}